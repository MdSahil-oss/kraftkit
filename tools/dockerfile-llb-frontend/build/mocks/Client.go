// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/moby/buildkit/frontend/gateway/client"

	digest "github.com/opencontainers/go-digest"

	llb "github.com/moby/buildkit/client/llb"

	mock "github.com/stretchr/testify/mock"

	result "github.com/moby/buildkit/solver/result"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BuildOpts provides a mock function with given fields:
func (_m *Client) BuildOpts() client.BuildOpts {
	ret := _m.Called()

	var r0 client.BuildOpts
	if rf, ok := ret.Get(0).(func() client.BuildOpts); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.BuildOpts)
	}

	return r0
}

// Inputs provides a mock function with given fields: ctx
func (_m *Client) Inputs(ctx context.Context) (map[string]llb.State, error) {
	ret := _m.Called(ctx)

	var r0 map[string]llb.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]llb.State, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]llb.State); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]llb.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContainer provides a mock function with given fields: ctx, req
func (_m *Client) NewContainer(ctx context.Context, req client.NewContainerRequest) (client.Container, error) {
	ret := _m.Called(ctx, req)

	var r0 client.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.NewContainerRequest) (client.Container, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.NewContainerRequest) client.Container); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.NewContainerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveImageConfig provides a mock function with given fields: ctx, ref, opt
func (_m *Client) ResolveImageConfig(ctx context.Context, ref string, opt llb.ResolveImageConfigOpt) (string, digest.Digest, []byte, error) {
	ret := _m.Called(ctx, ref, opt)

	var r0 string
	var r1 digest.Digest
	var r2 []byte
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, llb.ResolveImageConfigOpt) (string, digest.Digest, []byte, error)); ok {
		return rf(ctx, ref, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, llb.ResolveImageConfigOpt) string); ok {
		r0 = rf(ctx, ref, opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, llb.ResolveImageConfigOpt) digest.Digest); ok {
		r1 = rf(ctx, ref, opt)
	} else {
		r1 = ret.Get(1).(digest.Digest)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, llb.ResolveImageConfigOpt) []byte); ok {
		r2 = rf(ctx, ref, opt)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]byte)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, llb.ResolveImageConfigOpt) error); ok {
		r3 = rf(ctx, ref, opt)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Solve provides a mock function with given fields: ctx, req
func (_m *Client) Solve(ctx context.Context, req client.SolveRequest) (*result.Result[client.Reference], error) {
	ret := _m.Called(ctx, req)

	var r0 *result.Result[client.Reference]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.SolveRequest) (*result.Result[client.Reference], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.SolveRequest) *result.Result[client.Reference]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.Result[client.Reference])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.SolveRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Warn provides a mock function with given fields: ctx, dgst, msg, opts
func (_m *Client) Warn(ctx context.Context, dgst digest.Digest, msg string, opts client.WarnOpts) error {
	ret := _m.Called(ctx, dgst, msg, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest, string, client.WarnOpts) error); ok {
		r0 = rf(ctx, dgst, msg, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
